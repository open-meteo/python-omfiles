# This file is autogenerated by maturin v1.7.4
# To update, run
#
#    maturin generate-ci github
#
name: CI

on:
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          # Linux x86_64
          - runner: ubuntu-latest
            target: x86_64
            before-script: python3 -m ensurepip && cat /etc/os-release && yum install clang -y
            manylinux: "2_28"

          # Linux aarch64
          - runner: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            skip_tests: true
            before-script: |
              apt-get update && \
              apt-get install --assume-yes --no-install-recommends crossbuild-essential-arm64
            manylinux: "2_28"

          # Musl x86_64
          - runner: ubuntu-22.04
            target: x86_64-unknown-linux-musl
            container: docker://messense/rust-musl-cross:x86_64-musl
            before-script: cat /etc/os-release && apt install clang -y
            manylinux: musllinux_1_2
            is_musl: true

          # Windows
          - runner: windows-latest
            target: x64

          # macOS
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64

    container: ${{ matrix.platform.container }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12" # Use a stable Python version for building

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: "true"
          manylinux: ${{ matrix.platform.manylinux }}
          container: ${{ matrix.platform.is_musl && 'off' || '' }}
          before-script-linux: ${{ matrix.platform.before-script }}

      - uses: ./.github/actions/run-tests
        with:
          skip_tests: ${{ matrix.platform.skip_tests }}
          is_musl: ${{ matrix.platform.is_musl }}

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform.runner }}-${{ matrix.platform.target }}
          path: dist

  test-python-versions:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download Linux wheel
        uses: actions/download-artifact@v4
        with:
          name: wheels-ubuntu-latest-x86_64
          path: dist

      - name: Install and test
        run: |
          python -m pip install --upgrade pip
          WHEEL_PATH=$(ls dist/*.whl)
          python -m pip install --force-reinstall "$WHEEL_PATH"
          python -m pip install pytest
          pytest tests/

  test-min-deps:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.8" # Use the oldest supported Python version

      - name: Download Linux wheel
        uses: actions/download-artifact@v4
        with:
          name: wheels-ubuntu-latest-x86_64
          path: dist

      - name: Test with minimum dependencies
        run: |
          python -m pip install pytest==6.0
          WHEEL_PATH=$(ls dist/*.whl)
          python -m pip install --force-reinstall "$WHEEL_PATH" \
            "numpy==1.16.0" \
            "fsspec==2023.1.0" \
            "s3fs==2023.1.0" \
            "xarray==2023.1.0"
          # Run the tests with minimum dependencies
          pytest tests/ -v

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release to PyPI
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs:
      - build
      - sdist
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: "wheels-*/*"
      - name: Publish to PyPI
        if: "startsWith(github.ref, 'refs/tags/')"
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*

  test-pypi-release:
    name: Release to TestPyPI
    runs-on: ubuntu-latest
    # Run on pushes or manual workflow dispatch
    if: ${{github.event_name == 'workflow_dispatch' || (github.event_name == 'push') }}
    needs:
      - build
      - sdist
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: "wheels-*/*"
      - name: Publish to TestPyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}
          MATURIN_REPOSITORY: testpypi
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
