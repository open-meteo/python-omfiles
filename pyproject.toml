[build-system]
requires = ["maturin>=1.7,<2.0"]
build-backend = "maturin"

[project]
name = "omfiles"
requires-python = ">=3.9"
classifiers = [
    "Programming Language :: Rust",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]
dynamic = ["version"]
dependencies = [
    "numpy>=1.20.0",
    "fsspec>=2023.1.0",
    "s3fs>=2023.1.0",
    "xarray>=2023.1.0",
]

[dependency-groups]
dev = [
    "pytest>=6.1",
    "pytest-asyncio",
    "psutil",
    "maturin>=1.7,<2.0",
    "mkdocs>=1.4,<2.0",
    "mkdocstrings[python]",
]

[tool.maturin]
python-source = "python"             # Python source code is in the `python` directory
bindings = "pyo3"                    # pyo3 bindings is actually the default for maturin
features = ["pyo3/extension-module"] # Define extension module in pyproject.toml instead of Cargo.toml to not mess with `cargo test`

[tool.uv]
# Rebuild package when any rust files change
cache-keys = [{file = "pyproject.toml"}, {file = "rust/Cargo.toml"}, {file = "**/*.rs"}]
# Uncomment to build rust code in development mode
# config-settings = { build-args = '--profile=dev' }

[tool.pytest.ini_options]
asyncio_mode = "auto"

[tool.ruff]
line-length = 120

[tool.ruff.lint]
unfixable = ["F401"]
# Add import sorting rules (I-prefixed rules)
extend-select = ["I"]
select = ["D"] # Enable all docstring-related rules
ignore = [
    "D200",
    "D203",
    "D212",
    "D413"
]
[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D"]  # Ignore all docstring errors in tests/

[project.entry-points."xarray.backends"]
om = "omfiles.xarray_backend:OmXarrayEntrypoint"
